{- |
= Password Hashing
== Purpose
Secret keys used to encrypt or sign confidential data have to be
chosen from a very large keyspace. However, passwords are usually
short, human-generated strings, making dictionary attacks practical.

The 'deriveKey' operation derives a secret key of any size from a password
and a 'Salt'.

* The generated key has the size defined by the application, no matter
  what the password length is.
* The same password hashed with same parameters will always produce
  the same key.
* The same password hashed with different salts will produce different
  keys.
* The function deriving a key from a password and a salt is CPU
  intensive and intentionally requires a fair amount of memory.
  Therefore, it mitigates brute-force attacks by requiring a significant
  effort to verify each password.

Common use cases:

* Protecting an on-disk secret key with a password,
* Password storage, or rather: storing what it takes to verify a
  password without having to store the actual password.
-}

module Crypto.Sodium.PwHash
       ( -- * Constants
         saltBytes -- | Number of bytes in a 'Salt'.
       , hashedPasswordBytes -- | Number of bytes in a 'HashedPassword'.
       , opsLimitInteractive -- | Safe base line for 'OpsLimit'.
       , opsLimitSensitive -- | 'OpsLimit' for highly sensitive data.
       , memLimitInteractive -- | Safe base line for 'MemLimit'.
       , memLimitSensitive -- | 'MemLimit' for highly sensitive data.

       -- * Types
       , OpsLimit (..) -- | Maximum amount of computations to perform.
                       -- Raising this number will make the calling function
                       -- require more CPU cycles to compute a key.
       , MemLimit (..) -- | Maximum amount of RAM that the calling function
                       -- will use, in bytes. It is highly recommended to allow
                       -- the function to use at least 16 megabytes.
       , Salt -- | Unpredictable 'Salt' for key derivation.
       , mkSalt -- | Smart constructor for 'Salt'. Verifies that the length of
                -- the parameter is 'saltBytes'.
       , unSalt -- | Returns the contents of a 'Salt'.
       , HashedPassword -- | An ASCII-encoded NULL-terminated string that
                        -- includes:
                        --
                        -- * The result of a memory-hard, CPU-intensive function
                        --   applied to a password
                        -- * The automatically generated salt used for the
                        --   computation
                        -- * The other parameters needed to verify the password,
                        --   'OpsLimit' and 'MemLimit'.
       , mkHashedPassword -- | Smart constructor for 'HashedPassword'.
                          -- Verifies that the length of the parameter is
                          -- 'hashedPasswordBytes'.
       , unHashedPassword -- | Returns the contents of a 'HashedPassword'.

         -- * Salt Generation
       , randomSalt -- | Randomly generates a 'Salt'.

         -- * Key Derivation
       , deriveKey -- | Derives a key of a certain length from a
                   -- password and a 'Salt'.
                   -- Returns 'Nothing' if 'deriveKey' couldn't complete
                   -- successfully, usually because the operating system
                   -- refused to allocate the requested amount of memory.

         -- * Password Hashing
       , hashPassword -- | Derives a 'HashedPassword' from a password
                      -- with a randomly generated 'Salt'.
                      -- Returns 'Nothing' if it couldn't complete successfully,
                      -- usually because the operating system refused to
                      -- allocate the requested amount of memory.
       , verifyPassword -- | Verifies that a 'HashedPassword' is a valid
                        -- password verification string (as generated by 'hashPassword')
                        -- for a password.
       ) where

import           Crypto.Sodium.PwHash.ScryptSalsa208Sha256
